1. Strings
2. Concatonation with + (currently not allowed in checker)
3. Functies
4. Tests maken voor scope in if & while // done

3. Type hierarchy so that functions are better supported. //done
4. Kijk of er iets staat in @members AliaChecker
5. Meerzeggende exception handling //done
6. iload 0,1,2,3 zouden specifieke instructies kunnen krijgen net als bij ints
7. lazy evaluation voor boolean expressies
8. Add += to the language


Voor verslag
0. Beknopte beschrijving // Joost
1. syntax updaten? // Fedor
2. context-beperkingen // Fedor
3. semantiek // Fedor
4. problemen en oplossingen // Fedor
5. vertaalregels // Joost
6. beschrijving java-programmatuur // Fedor
7. Explain lots of code in checker in report.
8. Test plan & Test resultaten // Joost
9. Conclusies

Minimum eisen:
1. declarations (constant or variable) // done
2. arithmetic expression (as in table A.3) //done
3. assignment statement  //done
4. read statement //done
5. print statement //done
6. compound expression //ughdone

Bonus:
1. minimum eisen in JVM //done
2. if & while //done





Problemen:
Scope definitie. Doordat we geen expliciete declaraties hebben kunnen we niet een variabele herdefinieren binnen een nieuwe scope. Bij het herdefinieren zou de waarde in de scope erboven dan niet worden overschreven maar zou er een variabele met een andere geheugenlocatie worden gebruikt. We hebben besloten dat we dit zo willen. Als het niet mogelijk is om eerder gedefineërde variabelen te overschrijven verlies je een groot stuk functionaliteit. Het niet kunnen definiëeren van nieuwe variabelen met dezelfde naam als in bovenliggende scopes daarintegen is niet erg, je kan ze gewoon een nieuwe naam geven.

String template expressions: We mogen van StringTemplate geen expressies evalueren in de string template zelf. Dit willen we omdat we in Java een andere operatie willen aanroepen voor het op de stack zetten van integers onder de 6, en dit niet in andere talen zouden willen. Dit lijkt express niet mogelijk in de StringTemplate dus we geven een argument mee bij operand of een integer kleiner is dan 6, groter dan -1, of -1

Andere nadelen aan String templates. Geeft geen duidelijke plaatst binnen ANTLR voor java code. Het is lastiger om code repetitie te voorkomen (Do not repeat yourself).

We hebben gekozen om de optimalisatie van het vervangen van constanten uit te werken in de checker. In de checker is er namelijk een makelijke manier om de waarden die ze kregen bij de eerste declaratie op te slaan. Deze declaraties worden in de checker fase dan ook gelijk uit de ast gehaald, omdat ze hiernaa niet meer gebruikt worden. Voor een perfecte scheiding van logica zou deze in een optimalisatie fase moeten tussen de checker en de code generatie.

Notes:
Keuze - we ondersteunen geen constante gedefinieerd aan de hand van een expressie die mogelijk kan varieren, constanten mogen alleen gedefineerd 
