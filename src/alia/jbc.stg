group tmg;

file(instructions) ::= <<
; Jasmin JBC assembler code generated by AliaCodeGenerator
.class public Test.j
.super java/lang/Object

.method public \<init\>()V
   aload_0
   invokenonvirtual java/lang/Object/\<init\>()V
   return
.end method

.method public static main([Ljava/lang/String;)V
   .limit stack 20
   .limit locals 20
   
   <instructions; separator="\n">

   return
.end method
>>

statements(instructions) ::= <<
<instructions; separator="\n">
>>

statement(instruction) ::= <<
<instruction>
>>
whilestmt(statement, expr, labelCond, labelWhile) ::= <<
goto COND<labelCond>		; Jump to while condition
WHILE<labelWhile>:
<statement>
COND<labelCond>:
<expr>		; Execute condition
ifne WHILE<labelWhile>		; Jump to start of inner while statement
>>
printstmt(statements) ::= <<
getstatic java/lang/System/out Ljava/io/PrintStream;
<statements>
invokevirtual java/io/PrintStream/println(I)V ; add right constant pool reference bytes for println
>>
readstmt() ::= <<
; READ
>>
identifier(addr) ::= <<
iload_<addr>
>>
number(n, numberType) ::= <<
<if(numberType.lessthanfive)>
iconst_<n>
<elseif(numberType.minusone)>
iconst_m1
<elseif(numberType.byteType)>
bipush <n>
<elseif(numberType.shortType)>
sipush <n>
<else>
ldc <n>
<endif>
>>
character(c) ::= <<

bipush <c> ; Char
>>
boolean(b) ::= <<
iconst_<if(b)>1<else>0<endif> ; Bool
>>

declare(var, addr) ::= <<
PUSH        1
>>

assign(var, addr, expr) ::= <<
<expr>
istore_<addr>                  ; store value into <var>
>>


binexpr(x, y, instr) ::= <<
<x> ; expr1
<y> ; expr2
i<instr>
>>

binexprcomp(x, y, instr) ::= <<
<x>
<y>
if_icmp<instr> $+7 ; Go to iconst_1 if it is true
iconst_0
goto $+4 ; Go to the line after iconst_1
iconst_1
>>

loadvar(var, addr) ::= <<
LOAD(1)     <addr>[SB]                  ; load value of <var>
>>

loadnum(val) ::= <<
LOADL       <val>
>>

unarynot(x, instr) ::=  <<
<x>   ; if x is 0 make it 1, if x is 1 make it 0
ifeq ; jump forward if 0        jump current+7
iconst_0  ; if original was 1, load 0
goto ; add addr    ;jump to current +4
iconst_1 ; if original was 0, load 1
>>

unaryplus(x, instr) ::= <<  ; does nothing, is feature
<x>
>>

unarymin(x, instr) ::=  <<
<x>
i<instr>
>>

ifsmnt(cond, statements, elseStmnts, labelElse, labelNext) ::= <<
  <cond>
  if_icmpne ELSE<labelElse>
  <statements>
  goto NEXT<labelNext>
  ELSE<labelElse>:
  <elseStmnts; separator="\n">
  NEXT<labelNext>:
>>

elseifstmnt(cond, statements, elseStmnts, labelElse, labelNext) ::= <<
  <cond>
  if_icmpne ELSE<labelElse>
  <statements>
  goto NEXT<labelNext>
  ELSE<labelElse>:
  <elseStmnts; separator="\n">
  NEXT<labelNext>:
>>

elsemaybestmnt(statements)           ::= <<
<statements>
>>
