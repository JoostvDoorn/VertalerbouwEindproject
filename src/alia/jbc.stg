group tmg;

file(instructions) ::= <<
// JBC assembler code generated by AliaCodeGenerator
<instructions; separator="\n">
return                                    // end of program
>>

statements(instructions) ::= <<
<instructions; separator="\n">
>>

declare(var, addr) ::= <<
PUSH        1
>>

assign(var, addr, expr) ::= <<
<expr>
STORE(1)    <addr>[SB]                  // store value into <var>
>>

print(statements) ::= <<
<statements>
CALL        putint                      // print the expression
CALL        puteol                      // print end-of-line
>>

binexpr(x, y, instr) ::= <<
<x>
<y>
i<instr>
>>

binexprcomp(x, y, instr) ::= <<
<x>
<y>
if_icmp<instr> ; <line_number_store>
iconst_1
goto ; <line_number_store>
iconst_0
>>

loadvar(var, addr) ::= <<
LOAD(1)     <addr>[SB]                  // load value of <var>
>>

loadnum(val) ::= <<
LOADL       <val>
>>

unarynot(x, instr) ::=  <<
<x>   //if x is 0 make it 1, if x is 1 make it 0
ifeq //jump forward if 0        jump current+7
iconst_0  //if original was 1, load 0
goto // add addr    //jump to current +4
iconst_1 //if original was 0, load 1
>>

unaryplus(x, instr) ::= <<  //does nothing, is feature
<x>
>>

unarymin(x, instr) ::=  <<
<x>
i<instr>
>>